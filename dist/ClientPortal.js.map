{"version":3,"sources":["webpack:///webpack/bootstrap e298c15fb002a498cc14","webpack:///./ClientPortal.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;AC7DA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,8CAA8C;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sEAAsE;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO","file":"ClientPortal.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e298c15fb002a498cc14","var loadMaskEl;\r\nvar iframeResize = window.iFrameResize;\r\nfunction addLoadMask() {\r\n    if (loadMaskEl)\r\n        return;\r\n    var loadMaskSVG = \"<svg class='cp-load-mask-spinner'\\n        width='65px'\\n        height='65px' viewBox='0 0 66 66' xmlns='http://www.w3.org/2000/svg'>\\n    <circle fill='none' stroke-width='6' stroke-linecap='round' cx='33' cy='33' r='30'></circle>\\n    </svg>\";\r\n    loadMaskEl = document.createElement('DIV');\r\n    loadMaskEl.classList.add('cp-load-mask');\r\n    loadMaskEl.innerHTML = loadMaskSVG;\r\n    document.body.appendChild(loadMaskEl);\r\n}\r\nfunction showLoadMask() {\r\n    loadMaskEl.classList.add('is-visible');\r\n}\r\nfunction hideLoadMask() {\r\n    loadMaskEl.classList.remove('is-visible');\r\n}\r\nvar ClientPortal = /** @class */ (function () {\r\n    function ClientPortal(wrapper, options) {\r\n        var _this = this;\r\n        this._elementWrapperSelector = 'cp-iframe-wrapper';\r\n        this._modalOverlaySelector = 'cp-modal-overlay';\r\n        this._promiseResolveMap = {};\r\n        this._wasConnectedBefore = false;\r\n        if (!options || !options.url)\r\n            throw new Error(\"url is not defined\");\r\n        this._createIframe(wrapper, options);\r\n        window.addEventListener('message', function (event) {\r\n            if (!event.data)\r\n                return;\r\n            // other liblaries has their own mechanism for parsing data which isn't compoatibile \r\n            // with JSON.parse method if we cant parse message with json we can assume that this info \r\n            // doesn't interest us\r\n            var msg;\r\n            try {\r\n                msg = JSON.parse(event.data);\r\n            }\r\n            catch (e) {\r\n                return;\r\n            }\r\n            if (msg.isResponse) {\r\n                _this._onResponse(msg);\r\n            }\r\n            else {\r\n                _this._onMessage(msg, options, event);\r\n            }\r\n        });\r\n        if (!options.hideLoadMask) {\r\n            addLoadMask();\r\n            if (!options.hideInitLoadMask)\r\n                showLoadMask();\r\n        }\r\n        // seamless(this._element, {\r\n        //   showLoadingIndicator: false,\r\n        //   fallback: false\r\n        // });\r\n        var iframe = iframeResize({\r\n            checkOrigin: false,\r\n            warningTimeout: 15000\r\n        }, this._element);\r\n    }\r\n    ClientPortal.prototype._onMessage = function (msg, options, event) {\r\n        var result = this.recieveMsg(msg, options);\r\n        var response = JSON.stringify({\r\n            id: msg.id,\r\n            isResponse: true,\r\n            data: result,\r\n            action: msg.action\r\n        });\r\n        // If there wasn't any action performed it means that the communication comes from \r\n        // other liblary (seamless) it means that we shouldn't send response\r\n        if (msg.action && msg.id)\r\n            event.source.postMessage(response, event.origin);\r\n    };\r\n    ClientPortal.prototype._onResponse = function (msg) {\r\n        if (!this._promiseResolveMap[msg.id])\r\n            throw new Error(\"No callback was specified\");\r\n        this._promiseResolveMap[msg.id](msg.data);\r\n        delete this._promiseResolveMap[msg.id];\r\n    };\r\n    ClientPortal.prototype._getIframeTopOffset = function () {\r\n        var elem = this._element;\r\n        var offsetTop = elem.offsetTop;\r\n        var offsetParent = elem.offsetParent;\r\n        while (elem) {\r\n            if (elem.clientHeight !== elem.scrollHeight) {\r\n                // Additional if is needed bacause sometiome element's scrollHeight is larger than clientHeight\r\n                // event if there isn't any scroll. \r\n                // This situation can be observed when absolutely positioned child is added to an element.\r\n                var styles = getComputedStyle(elem);\r\n                if (styles.overflow === \"auto\" || styles.overflowY === \"auto\")\r\n                    return offsetTop - elem.offsetTop;\r\n            }\r\n            if (elem === offsetParent) {\r\n                offsetTop += elem.offsetTop;\r\n                offsetParent = elem.offsetParent;\r\n            }\r\n            elem = elem.parentElement;\r\n        }\r\n        return offsetTop;\r\n    };\r\n    ClientPortal.prototype._getViewport = function (options) {\r\n        var boundingRect = this._element.getBoundingClientRect();\r\n        return {\r\n            navbarHeight: this._getIframeTopOffset(),\r\n            top: boundingRect.top + window.scrollY,\r\n            bottom: boundingRect.bottom,\r\n            windowHeight: window.innerHeight,\r\n            scrollTop: window.scrollY\r\n        };\r\n    };\r\n    ;\r\n    ClientPortal.prototype.recieveMsg = function (msg, options) {\r\n        var action = msg.action;\r\n        var data = msg.data;\r\n        var result;\r\n        switch (action) {\r\n            case 'child-connected':\r\n                this._sendData('parent-connected');\r\n                if (!this._wasConnectedBefore) {\r\n                    this.goTo(options.defaultState || \"Profile\", options.defaultStateParams);\r\n                    this._wasConnectedBefore = true;\r\n                }\r\n                options.onConnect && options.onConnect();\r\n                break;\r\n            case 'showLoadMask':\r\n                if (!options.hideLoadMask)\r\n                    showLoadMask();\r\n                options.onShowLoadMask && options.onShowLoadMask();\r\n                break;\r\n            case 'hideLoadMask':\r\n                if (!options.hideLoadMask)\r\n                    hideLoadMask();\r\n                options.onHideLoadMask && options.onHideLoadMask();\r\n                break;\r\n            case 'showModalOverlay':\r\n                if (!options.hideModalOverlay)\r\n                    this._showModalOverlay();\r\n                options.onShowModal && options.onShowModal();\r\n                result = this._getViewport(options);\r\n                break;\r\n            case 'hideModalOverlay':\r\n                if (!options.hideModalOverlay)\r\n                    this._hideModalOverlay();\r\n                options.onHideModal && options.onHideModal();\r\n                break;\r\n            case 'userLoggedIn':\r\n                options.onUserLoggedIn && options.onUserLoggedIn(data);\r\n                break;\r\n            case 'userLoggedOut':\r\n                options.onUserLoggedOut && options.onUserLoggedOut(data);\r\n                break;\r\n            case 'stateChangeSuccess':\r\n                // some browsers add scroll to html, some to body \r\n                // that's why I scroll on both elements\r\n                var offsetTop = this._getIframeTopOffset();\r\n                if (document.body.scrollTop > offsetTop || document.documentElement.scrollTop > offsetTop) {\r\n                    window.scroll({ top: offsetTop, left: 0, behavior: 'smooth' });\r\n                }\r\n                if (!options.enableVirtualStates && data.isVirtual)\r\n                    break;\r\n                options.onStateChangeSuccess && options.onStateChangeSuccess(data);\r\n                break;\r\n            case 'mobileDropdownOpen':\r\n                options.onMobileDropdownOpen && options.onMobileDropdownOpen();\r\n                result = this._getViewport(options);\r\n                break;\r\n            case 'mobileDropdownClose':\r\n                options.onMobileDropdownClose && options.onMobileDropdownClose();\r\n                break;\r\n            case 'scrollWindow':\r\n                if (options.onContentScroll) {\r\n                    options.onContentScroll(data);\r\n                }\r\n                else {\r\n                    window.scroll({ top: data + this._getIframeTopOffset(), left: 0, behavior: 'smooth' });\r\n                }\r\n                break;\r\n        }\r\n        return result;\r\n    };\r\n    ClientPortal.prototype._createModalOverlay = function () {\r\n        var overlayEl = document.createElement(\"DIV\");\r\n        overlayEl.classList.add(this._modalOverlaySelector);\r\n        return overlayEl;\r\n    };\r\n    ;\r\n    ClientPortal.prototype._showModalOverlay = function () {\r\n        var boundingRect = this._element.getBoundingClientRect();\r\n        var bodyRect = document.body.getBoundingClientRect();\r\n        var topOverlay = this._createModalOverlay();\r\n        topOverlay.style.top = '-1000px';\r\n        topOverlay.style.height = '1000px';\r\n        var bottomOverlay = this._createModalOverlay();\r\n        var bottomOverlayHeight = (bodyRect.bottom - boundingRect.bottom);\r\n        // todo: find out why -4 is needed\r\n        bottomOverlay.style.bottom = (bottomOverlayHeight - 4) * -1 + 'px';\r\n        bottomOverlay.style.height = bottomOverlayHeight + 'px';\r\n        if (!this._elementWrapper)\r\n            return;\r\n        this._elementWrapper.appendChild(topOverlay);\r\n        this._elementWrapper.appendChild(bottomOverlay);\r\n    };\r\n    ClientPortal.prototype._hideModalOverlay = function () {\r\n        var parentElement = document.getElementsByClassName(this._elementWrapperSelector)[0];\r\n        var overlayElements = document.getElementsByClassName(this._modalOverlaySelector);\r\n        var len = overlayElements.length;\r\n        for (var i = 0; i < len; i += 1) {\r\n            parentElement.removeChild(overlayElements[0]);\r\n        }\r\n    };\r\n    ClientPortal.prototype._createIframe = function (elementWrapper, options) {\r\n        var iframeElement = document.createElement(\"iframe\");\r\n        var language = options && options.language ? \"&lang=\" + options.language : \"\";\r\n        // iframeElement.setAttribute(\"sandbox\", \"allow-scripts allow-same-origin\");\r\n        var isMobile = window.innerWidth < 500 || window.innerHeight < 500;\r\n        var mode = isMobile ? '?mode=mobile' : '?mode=desktop';\r\n        var url = options.url;\r\n        url = url[url.length - 1] === \"/\" ? url : url + \"/\";\r\n        var defaultState = options.defaultState || \"Profile\";\r\n        var params = '?' + this._serializeParams(options.defaultStateParams) || \"\";\r\n        iframeElement.src = url + mode + language + '#/' + defaultState + params;\r\n        iframeElement.style.width = '100%';\r\n        iframeElement.style.border = 'none';\r\n        elementWrapper.appendChild(iframeElement);\r\n        elementWrapper.classList.add(this._elementWrapperSelector);\r\n        this._element = iframeElement;\r\n        this._elementWrapper = elementWrapper;\r\n    };\r\n    ClientPortal.prototype._serializeParams = function (paramsObject) {\r\n        var paramsString = \"\";\r\n        for (var key in paramsObject) {\r\n            if (paramsString != \"\") {\r\n                paramsString += \"&\";\r\n            }\r\n            paramsString += key + \"=\" + encodeURIComponent(paramsObject[key]);\r\n        }\r\n        return paramsString;\r\n    };\r\n    // because of communication now liblary supports only one iframe support\r\n    ClientPortal.prototype._sendData = function (action, data) {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            var id = Math.round(Math.random() * 999999);\r\n            while (_this._promiseResolveMap[id])\r\n                id = Math.round(Math.random() * 999999);\r\n            var msg = {\r\n                isResponse: false,\r\n                action: action,\r\n                data: data,\r\n                id: id\r\n            };\r\n            _this._element.contentWindow.postMessage(JSON.stringify(msg), '*');\r\n            _this._promiseResolveMap[id] = resolve;\r\n        });\r\n    };\r\n    ClientPortal.prototype.goTo = function (state, params) {\r\n        var data = {\r\n            state: state,\r\n            params: params\r\n        };\r\n        return this._sendData('goToState', data);\r\n    };\r\n    ClientPortal.prototype.logout = function () {\r\n        return this._sendData('logout');\r\n    };\r\n    ClientPortal.prototype.changeLanguage = function (languageCode) {\r\n        return this._sendData('changeLanguage', languageCode);\r\n    };\r\n    ClientPortal.prototype.isUserLoggedIn = function () {\r\n        return this._sendData('isUserLogged');\r\n    };\r\n    ClientPortal.prototype.getElement = function () {\r\n        return this._element;\r\n    };\r\n    ClientPortal.State = {\r\n        Login: 'Auth.Login',\r\n        Registration: 'Registration',\r\n        Classes: 'Classes',\r\n        ClassesList: 'Classes.List',\r\n        PersonalTraining: 'PersonalTraining',\r\n        ReservedClasses: 'MyCalendar.AllActivities',\r\n        Products: 'MyProducts',\r\n        BuyProducts: 'BuyProducts',\r\n        Profile: 'Profile',\r\n        ProfileEdit: 'Profile.Edit',\r\n        ProfilePayment: 'Profile.Payment',\r\n        ProfileContract: 'Profile.Contract',\r\n        ProfileFreeze: 'Profile.Freeze',\r\n        ProfilePrepaid: 'Profile.Prepaid',\r\n        ProfileChangePassword: 'Profile.ChangePassword',\r\n        ProfilePayments: 'Profile.Payments',\r\n        ProfileFamily: 'Profile.Family'\r\n    };\r\n    return ClientPortal;\r\n}());\r\nexport { ClientPortal };\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./ClientPortal.ts\n// module id = 0\n// module chunks = 0 1"],"sourceRoot":""}